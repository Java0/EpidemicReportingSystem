'use strict';
/**
 * 全站http配置
 *
 * axios参数说明
 * isSerialize是否开启form表单提交
 * isToken是否需要token
 */
import axios from 'axios'
import store from '../store/';
import router from './router'
import {serialize,isEmpty} from '../utils/util'
import { setStore, getStore } from '../utils/store'
import {Message} from 'element-ui'
import website from '@/config/website';
import NProgress from 'nprogress' // progress bar
import 'nprogress/nprogress.css' // progress bar style
import {Base64} from 'js-base64';
import {baseUrl} from '@/config/env';
import qs from "qs";

axios.defaults.timeout = 10000;
//返回其他状态吗
axios.defaults.validateStatus = function (status) {
  return status >= 200 && status <= 500; // 默认的
};
//跨域请求，允许保存cookie
axios.defaults.withCredentials = true;
// NProgress Configuration
NProgress.configure({
  showSpinner: false
});
//HTTPrequest拦截
axios.interceptors.request.use(config => {
  NProgress.start() // start progress bar
  //const meta = (config.meta || {});
  //const isToken = meta.isToken === false;
  //请求带上hhid
  //config.headers['hhid']=store.getters.userInfo.hhid;  2.0 后台缺少字段不需要hhid
  var token=getStore({ name: 'token', type: 'session' });
  var jwt=getStore({ name: 'jwt', type: 'session' });//瑞飞公司验证

  if (!isEmpty(jwt)) {
    config.headers['Authorization'] = jwt;
  }else{
    config.headers['Authorization'] = `Basic ${Base64.encode(`${website.clientId}:${website.clientSecret}`)}`;
  }

  if (!isEmpty(token)) {
    //这里的token需要在登陆的时候设置进去
    config.headers['x-auth-token'] = token; // 让每个请求携带token--['Authorization']为自定义key 请根据实际情况自行修改
  }else{
      //优先使用集成地址的hhid 然后去找登陆hhid
      config.headers['hhid']=store.getters.integrateHHid||(store.getters.userInfo.hhid||"");
  }
  //headers中配置serialize为true开启序列化
  /**if (config.method === 'post' && meta.isSerialize === true) {
    config.data = serialize(config.data);
  }*/
  /**
   * 如果是文件类型的请求放过不需要序列化
   * 如果有参数 才有必要去序列化参数 必须要序列化才能获取到参数
   */
  if(isEmpty(config.headers['Content-Type'])||config.headers['Content-Type'].indexOf("multipart/form-data")==-1){
    if (config.method === 'post'&&!isEmpty(config.data)) {
      config.data = serialize(config.data);
    }
  }
  //如果传参是数组处理
  if(config.method === 'get'){
    config.paramsSerializer = function(params) {
        return qs.stringify(params, {arrayFormat: 'repeat'})
    }
  }
  return config;
}, error => {
  return Promise.reject(error)
});
//HTTPresponse拦截
axios.interceptors.response.use(res => {
  NProgress.done();
  const status = res.data.code || 200
  const statusWhiteList = website.statusWhiteList || [];
  const message = res.data.msg || '未返回msg或未知错误';
  //如果在白名单里则自行catch逻辑处理
  if (statusWhiteList.includes(status)) return Promise.reject(res);
  //如果是401则跳转到登录页面
  if (status === 401) store.dispatch('FedLogOut').then(() => router.push({path: '/login'}));
  // 如果请求为非200否者默认统一处理
  if (status !== 200) {
    Message({
      message: message,
      type: 'error'
    })
    return Promise.reject(new Error(message));
  }
  return res;
}, error => {
  NProgress.done();
  return Promise.reject(new Error(error));
});



function checkStatus(response) {
  NProgress.done()
  if (response.status === 200 || response.status === 304) {
      return response
  }
  return {
      data: {
          code: -404,
          message: response.statusText,
          data: response.statusText,
      }
  }
}
//避免重写 不要写和post一样的名字
axios.apiPost=function(params){
  return axios({
      method: 'post',
      url:baseUrl+params.url,
      data: params.data,
      timeout: 30000,
      headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
  }).then(checkStatus).then(params.call)
}
//避免重写 不要写和get一样的名字
axios.apiGet=function(params) {
  return axios({
      method: 'get',
      url:baseUrl+params.url,
      params:params.data,
      timeout: 30000,
      headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
  }).then(checkStatus).then(params.call)
}

axios.fileGet=function(params) {
  return axios({
      method: 'get',
      url:baseUrl+params.url,
      params:params.data,
      responseType: 'blob',//blob
      timeout: 30000
  }).then(checkStatus).then(params.call)
}
//避免重写 不要写和post一样的名字
axios.httpPost=function(params){
  return axios({
      method: 'post',
      url:params.url,
      data: params.data,
      timeout: 30000,
      headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
  }).then(checkStatus).then(params.call)
}
//避免重写 不要写和get一样的名字
axios.httpGet=function(params) {
  return axios({
      method: 'get',
      url:params.url,
      params:params.data,
      timeout: 30000,
      headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
  }).then(checkStatus).then(params.call)
}

//避免重写 不要写和post一样的名字
axios.filePost=function(params){
  return axios.post(baseUrl+params.url,params.data,{
    headers:{
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type':'multipart/form-data'
    }
  }).then(checkStatus).then(params.call)
}

export default axios;
