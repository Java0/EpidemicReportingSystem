'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _auth = require('../../utils/auth');

var _store = require('../../utils/store');

var _validate = require('../../utils/validate');

var _util = require('../../utils/util');

var _menutils = require('../../utils/menutils');

var _website = require('@/config/website');

var _website2 = _interopRequireDefault(_website);

var _env = require('@/config/env');

var _user = require('@/api/user');

var _user2 = require('npm-pansoft-base/lib/api/user');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//循环遍历菜单
function addPath(ele, first) {
    var menu = _website2.default.menu;
    var propsConfig = menu.props;
    var propsDefault = {
        label: propsConfig.label || 'name',
        path: propsConfig.path || 'path',
        icon: propsConfig.icon || 'icon',
        children: propsConfig.children || 'children'
    };
    var icon = ele[propsDefault.icon];
    ele[propsDefault.icon] = (0, _validate.validatenull)(icon) ? menu.iconDefault : icon;
    var isChild = ele[propsDefault.children] && ele[propsDefault.children].length !== 0;
    if (!isChild) ele[propsDefault.children] = [];
    if (!isChild && first && !(0, _validate.isURL)(ele[propsDefault.path])) {
        ele[propsDefault.path] = ele[propsDefault.path] + '/index';
    } else {
        ele[propsDefault.children].forEach(function (child) {
            addPath(child);
        });
    }
}
var user = {
    state: {
        userInfo: (0, _store.getStore)({ name: 'userInfo' }) || {},
        permission: (0, _store.getStore)({ name: 'permission' }) || {},
        jwt: (0, _store.getStore)({ name: 'jwt' }) || "",
        roles: [],
        menu: (0, _store.getStore)({ name: 'menu' }) || [],
        menuAll: [],
        token: (0, _store.getStore)({ name: 'token' }) || '',
        integrateHHid: (0, _store.getStore)({ name: 'integrateHHid' }) || '',
        backConfig: (0, _store.getStore)({ name: 'backconfig' }) || ''
    },
    actions: {
        //根据用户名登录service层
        LoginByUsername: function LoginByUsername(_ref, userInfo) {
            var commit = _ref.commit;

            return new Promise(function (resolve, reject) {
                var url = '/user/login';
                if (_website2.default.checkPower) {
                    url = _env.baseUrl + (userInfo.url || '/login/ajaxLogin');
                }
                (0, _user.loginByUsername)(userInfo.domain, userInfo.yhid, userInfo.yhkl, userInfo.type, url).then(function (res) {
                    // console.log(res.data);
                    if (res.data.flag) {
                        //这里的x-auth-token和axios 拦截器里面的token对应
                        commit('SET_TOKEN', res.headers["x-auth-token"]);
                        if (_website2.default.checkPower) {
                            var data = res.data.data; //用户信息
                            commit('SET_USERIFNO', data);
                            (0, _user.getConfig)().then(function (res) {
                                commit('SET_BACK_CONFIG', res.data);
                            }).catch(function (error) {
                                reject(error);
                            });
                        } else {
                            commit('SET_USERIFNO', userInfo);
                        }
                        commit('DEL_ALL_TAG');
                        commit('CLEAR_LOCK');
                        resolve(res);
                    } else {
                        resolve(res);
                    }
                }).catch(function (error) {
                    reject(error);
                });
            });
        },
        LoginByUserNameForJwt: function LoginByUserNameForJwt(_ref2, options) {
            var commit = _ref2.commit;

            return new Promise(function (resolve, reject) {
                (0, _user2.loginByUserNameForJwt)(options.url, options.yhid, options.domain, options.yhkl, options.jwtState).then(function (res) {
                    if (res.data.loginId) {
                        //这里的x-auth-token和axios 拦截器里面的token对应
                        commit('SET_JWT', res.headers.authorization);
                        commit('DEL_ALL_TAG');
                        commit('CLEAR_LOCK');
                        resolve(res);
                    } else {
                        resolve(res);
                    }
                }).catch(function (error) {
                    reject(error);
                });
            });
        },
        LoginByJwt: function LoginByJwt(_ref3, options) {
            var commit = _ref3.commit;

            return new Promise(function (resolve, reject) {
                (0, _user2.loginByJwt)(options.url, options.authorization).then(function (res) {
                    if (!(0, _util.isEmpty)(res.data.result)) {
                        var userInfo = { yhxm: res.data.result.loginName, yhid: res.data.result.loginId };
                        (0, _store.setStore)({
                            name: 'originalmenu',
                            content: res.data.result.menuList,
                            type: 'session'
                        });
                        commit('SET_USERIFNO', userInfo);
                        resolve(res);
                    } else {
                        resolve(res);
                    }
                }).catch(function (error) {
                    reject(error);
                });
            });
        },
        LoginWithJwtByUserName: function LoginWithJwtByUserName(_ref4, options) {
            var commit = _ref4.commit;

            return new Promise(function (resolve, reject) {
                (0, _user2.loginByUserNameForJwt)(options.url, options.yhid, options.domain, options.yhkl, options.jwtState).then(function (res) {
                    if (res.data.loginId) {
                        //这里的x-auth-token和axios 拦截器里面的token对应
                        commit('SET_JWT', res.headers.authorization);
                        commit('DEL_ALL_TAG');
                        commit('CLEAR_LOCK');
                        (0, _user2.loginByJwt)(options.jwtUrl, res.headers.authorization).then(function (resUser) {
                            if (!(0, _util.isEmpty)(resUser.data.result)) {
                                var userInfo = { yhxm: resUser.data.result.loginName, yhid: resUser.data.result.loginId };
                                (0, _store.setStore)({
                                    name: 'originalmenu',
                                    content: resUser.data.result.menuList,
                                    type: 'session'
                                });
                                commit('SET_USERIFNO', userInfo);
                                resolve(resUser);
                            } else {
                                resolve(resUser);
                            }
                        }).catch(function (error) {
                            reject(error);
                        });
                    } else {
                        resolve(res);
                    }
                }).catch(function (error) {
                    reject(error);
                });
            });
        },
        GetButtons: function GetButtons(_ref5) {
            var commit = _ref5.commit;

            return new Promise(function (resolve) {
                (0, _user.getButtons)().then(function (res) {
                    var data = res.data.data;
                    commit('SET_PERMISSION', data);
                    resolve();
                });
            });
        },

        //根据手机号登录
        LoginByPhone: function LoginByPhone(_ref6, userInfo) {
            var commit = _ref6.commit;

            return new Promise(function (resolve) {
                (0, _user.loginByUsername)(userInfo.phone, userInfo.code).then(function (res) {
                    var data = res.data.data;
                    commit('SET_TOKEN', res.headers["x-auth-token"]);
                    commit('DEL_ALL_TAG');
                    commit('CLEAR_LOCK');
                    resolve();
                });
            });
        },

        //需要自己写
        GetUserInfo: function GetUserInfo(_ref7) {
            var commit = _ref7.commit;

            return new Promise(function (resolve, reject) {
                (0, _user.getUserInfo)().then(function (res) {
                    var data = res.data.data;
                    commit('SET_ROLES', data.roles);
                    resolve(data);
                }).catch(function (err) {
                    reject(err);
                });
            });
        },

        //刷新token 需要自己写后台
        RefeshToken: function RefeshToken(_ref8) {
            var state = _ref8.state,
                commit = _ref8.commit;

            return new Promise(function (resolve, reject) {
                (0, _user.refeshToken)(state.refeshToken).then(function (res) {
                    var data = res.data.data;
                    commit('SET_TOKEN', res.headers["x-auth-token"]);
                    resolve(data);
                }).catch(function (error) {
                    reject(error);
                });
            });
        },

        // 登出
        LogOut: function LogOut(_ref9) {
            var commit = _ref9.commit;

            return new Promise(function (resolve, reject) {
                //logout().then(() => {
                commit('SET_TOKEN', '');
                commit('SET_MENU', []);
                commit('SET_ROLES', []);
                commit('DEL_ALL_TAG');
                commit('CLEAR_LOCK');
                commit('SET_USERIFNO', {});
                (0, _store.clearStore)({ type: 'session' });
                (0, _auth.removeToken)();
                resolve();
                //}).catch(error => {
                //reject()
                //})
            });
        },

        //注销session
        FedLogOut: function FedLogOut(_ref10) {
            var commit = _ref10.commit;

            return new Promise(function (resolve) {
                commit('SET_TOKEN', '');
                commit('SET_MENU', []);
                commit('SET_ROLES', []);
                commit('DEL_ALL_TAG');
                commit('SET_USERIFNO', {});
                commit('CLEAR_LOCK');
                (0, _store.clearStore)({ type: 'session' });
                (0, _auth.removeToken)();
                resolve();
            });
        },
        GetTopMenu: function GetTopMenu() {
            return new Promise(function (resolve) {
                var url = "/sysMenu/getChildrenSysMenu";
                if (_website2.default.loaclMenu) {
                    url = "/user/getTopMenu";
                }
                (0, _user.getTopMenu)(url).then(function (res) {
                    var data = res.data || [];
                    var newData = data;
                    newData = (0, _menutils.buildMenu)(data);
                    //首页必须有不然菜单出不来
                    newData.unshift(_website2.default.fistPage);
                    resolve(newData);
                });
            });
        },

        //获取系统菜单
        GetMenu: function GetMenu(_ref11, parentId) {
            var commit = _ref11.commit,
                dispatch = _ref11.dispatch;

            return new Promise(function (resolve) {
                var url = "/user/getMenu";
                if (parentId) {
                    url = "/sysMenu/getYwdyAndGn";
                } else {
                    //url="/sysMenu/getChildrenSysMenu";
                    url = "/sysMenu/getAllSysMenu";
                }
                if (_website2.default.loaclMenu) {
                    url = "/user/getMenu";
                }
                (0, _user.getMenu)(parentId, url).then(function (res) {
                    var data = res.data;
                    var newData = data;
                    //用公司的统一授权菜单的话需要在这转换成所需要的格式
                    newData = (0, _menutils.buildMenu)(data);
                    var menu = (0, _util.deepClone)(newData);
                    menu.forEach(function (ele) {
                        addPath(ele, true);
                    });
                    //此处是 获取菜单的关键步骤 ，如果没有这个步骤菜单出不来
                    commit('SET_MENU', menu);
                    //dispatch('GetButtons');
                    resolve(menu);
                });
            });
        },

        //获取用户中心系统菜单
        GetNewMenu: function GetNewMenu(_ref12, parentId) {
            var commit = _ref12.commit,
                dispatch = _ref12.dispatch;

            return new Promise(function (resolve) {
                var originalmenu = (0, _util.deepClone)((0, _store.getStore)({ name: "originalmenu" }));
                // console.log(originalmenu);
                var config = { id: "resourceId", pid: "resParentId" };
                var newMenu = (0, _util.jsonTree)(originalmenu, config);
                // console.log(newMenu);

                var newmenu = (0, _menutils.buildNewMenu)(newMenu);
                // console.log(newmenu);

                newmenu.forEach(function (ele) {
                    addPath(ele, true);
                });
                //此处是 获取菜单的关键步骤 ，如果没有这个步骤菜单出不来
                commit('SET_MENU', newmenu);
                //dispatch('GetButtons');
                resolve(newmenu);
            });
        }
    },
    mutations: {
        SET_TOKEN: function SET_TOKEN(state, token) {
            (0, _auth.setToken)(token);
            state.token = token;
            (0, _store.setStore)({ name: 'token', content: state.token, type: 'session' });
        },
        SET_USERIFNO: function SET_USERIFNO(state, userInfo) {
            state.userInfo = userInfo;
            (0, _store.setStore)({ name: 'userInfo', content: state.userInfo });
        },
        SET_MENU: function SET_MENU(state, menu) {
            state.menu = menu;
            (0, _store.setStore)({ name: 'menu', content: state.menu, type: 'session' });
        },
        SET_MENU_ALL: function SET_MENU_ALL(state, menuAll) {
            state.menuAll = menuAll;
        },
        SET_ROLES: function SET_ROLES(state, roles) {
            state.roles = roles;
        },
        SET_JWT: function SET_JWT(state, jwt) {
            state.jwt = jwt;
            (0, _store.setStore)({ name: 'jwt', content: state.jwt, type: 'session' });
        },
        SET_PERMISSION: function SET_PERMISSION(state, permission) {
            var result = [];
            function getCode(list) {
                if (list) {
                    list.forEach(function (ele) {
                        if ((typeof ele === 'undefined' ? 'undefined' : _typeof(ele)) === 'object') {
                            var chiildren = ele.children;
                            var code = ele.code;
                            if (chiildren) {
                                getCode(chiildren);
                            } else {
                                result.push(code);
                            }
                        }
                    });
                }
            }
            getCode(permission);
            state.permission = {};
            result.forEach(function (ele) {
                state.permission[ele] = true;
            });
            (0, _store.setStore)({ name: 'permission', content: state.permission, type: 'session' });
        },
        SET_BACK_CONFIG: function SET_BACK_CONFIG(state, backconfig) {
            state.backconfig = backconfig;
            (0, _store.setStore)({ name: 'backconfig', content: state.backconfig, type: 'session' });
        },
        SET_INTEGRATEHHID: function SET_INTEGRATEHHID(state, integrateHHid) {
            state.integrateHHid = integrateHHid;
            (0, _store.setStore)({ name: 'integrateHHid', content: state.integrateHHid, type: 'session' });
        }
    }

};
exports.default = user;