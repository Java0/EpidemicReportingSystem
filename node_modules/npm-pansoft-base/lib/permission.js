'use strict';

var _router = require('npm-pansoft-base/lib/router/router');

var _router2 = _interopRequireDefault(_router);

var _store = require('npm-pansoft-base/lib/store');

var _store2 = _interopRequireDefault(_store);

var _validate = require('npm-pansoft-base/lib/utils/validate');

var _store3 = require('npm-pansoft-base/lib/utils/store');

var _util = require('npm-pansoft-base/lib/utils/util');

var _website = require('@/config/website');

var _website2 = _interopRequireDefault(_website);

var _nprogress = require('nprogress');

var _nprogress2 = _interopRequireDefault(_nprogress);

require('nprogress/nprogress.css');

var _axios = require('npm-pansoft-base/lib/router/axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// progress bar
_nprogress2.default.configure({ showSpinner: false }); // progress bar style
/**
 * 全站权限配置
 *
 */

var lockPage = _store2.default.getters.website.lockPage; //锁屏页
_router2.default.beforeEach(function (to, from, next) {
    //缓冲设置
    if (to.meta.keepAlive === true && _store2.default.state.tags.tagList.some(function (ele) {
        return ele.value === to.fullPath;
    })) {
        to.meta.$keepAlive = true;
    } else {
        _nprogress2.default.start();
        if (to.meta.keepAlive === true && (0, _validate.validatenull)(to.meta.$keepAlive)) {
            to.meta.$keepAlive = true;
        } else {
            to.meta.$keepAlive = false;
        }
    }
    //const meta = to.meta || {};
    var token = (0, _store3.getStore)({ name: 'token', type: 'session' });
    var jwt = (0, _store3.getStore)({ name: 'jwt', type: 'session' });
    //登陆有bug
    // console.log(token);
    // console.log(jwt);
    //判断是否需要认证，没有登录访问去登录页
    //meta.isAuth 之前代码是这么写的  meta是个传参对象 类似param
    //如何配置文件中导出写的是 export default 那么这里就要加default
    //const con=require("./config/website").default;
    if (_store2.default.getters.isLock && to.path != lockPage) {
        //如果系统激活锁屏，全部跳转到锁屏页
        next({ path: lockPage });
    } else if (to.path === '/login') {
        //如果登录成功访问登录页跳转到主页
        _store2.default.dispatch('LogOut');
        //此处不能加地址 不然会无限循环
        next();
    } else if (!(0, _util.isEmpty)(to.query["hhid"])) {
        //验证hhid 如果会话id通过则把hhid放入store中
        _store2.default.commit("SET_INTEGRATEHHID", to.query["hhid"]);
        // console.log(store.getters.integrateHHid);
        _axios2.default.apiPost({
            url: "/login/hhidLogin",
            data: {
                hhid: to.query["hhid"]
            },
            call: function call(data) {
                if (data.data.flag) {
                    (0, _store3.setStore)({ name: 'userInfo', content: data.data.data });
                    next();
                } else {
                    next({ path: '/login' });
                }
            }
        });
    } else {
        //是否检验统一授权
        if (_website2.default.checkPower === false) {
            //这一段用来添加首页tags标签 如果不加这个标签就显示不出来  config中的label 对应的name 改成了label 不知道是否有影响  
            var value = to.query.src || to.fullPath;
            var label = to.query.name || to.name;
            var meta = to.meta || _router2.default.$avueRouter.meta || {};
            var i18n = to.query.i18n;
            if (meta.isTab !== false && !(0, _validate.validatenull)(value) && !(0, _validate.validatenull)(label)) {
                _store2.default.commit('ADD_TAG', {
                    label: label,
                    value: value,
                    params: to.params,
                    query: to.query,
                    meta: function () {
                        if (!i18n) {
                            return meta;
                        }
                        return {
                            i18n: i18n
                        };
                    }(),
                    group: _router2.default.$avueRouter.group || []
                });
            }
            next();
            //hhidLogin 集成页面登陆 先判断是否有hhid
        } else {
            if (!(0, _util.isEmpty)(token)) {
                //如果用户信息为空则获取用户信息，获取用户信息失败，跳转到登录页
                if (_store2.default.getters.token.length === 0) {
                    _store2.default.dispatch('FedLogOut').then(function () {
                        next({ path: '/login' });
                    });
                } else {
                    var _value = to.query.src || to.fullPath;
                    var _label = to.query.name || to.name;
                    var _meta = to.meta || _router2.default.$avueRouter.meta || {};
                    var _i18n = to.query.i18n;
                    if (_meta.isTab !== false && !(0, _validate.validatenull)(_value) && !(0, _validate.validatenull)(_label)) {
                        _store2.default.commit('ADD_TAG', {
                            label: _label,
                            value: _value,
                            params: to.params,
                            query: to.query,
                            meta: function () {
                                if (!_i18n) {
                                    return _meta;
                                }
                                return {
                                    i18n: _i18n
                                };
                            }(),
                            group: _router2.default.$avueRouter.group || []
                        });
                    }
                    next();
                }
            } else if (!(0, _util.isEmpty)(jwt)) {
                //如果用户信息为空则获取用户信息，获取用户信息失败，跳转到登录页
                if ((0, _util.isEmpty)(token)) {
                    _store2.default.dispatch('FedLogOut').then(function () {
                        next({ path: '/login' });
                    });
                } else {
                    var _value2 = to.query.src || to.fullPath;
                    var _label2 = to.query.name || to.name;
                    var _meta2 = to.meta || _router2.default.$avueRouter.meta || {};
                    var _i18n2 = to.query.i18n;
                    if (_meta2.isTab !== false && !(0, _validate.validatenull)(_value2) && !(0, _validate.validatenull)(_label2)) {
                        _store2.default.commit('ADD_TAG', {
                            label: _label2,
                            value: _value2,
                            params: to.params,
                            query: to.query,
                            meta: function () {
                                if (!_i18n2) {
                                    return _meta2;
                                }
                                return {
                                    i18n: _i18n2
                                };
                            }(),
                            group: _router2.default.$avueRouter.group || []
                        });
                    }
                    next();
                }
            } else {
                //这里检测会话id有点问题
                console.log(_store2.default.getters.userInfo.hhid);
                if ((0, _util.isEmpty)(_store2.default.getters.userInfo.hhid)) {
                    _store2.default.dispatch('FedLogOut').then(function () {
                        next({ path: '/login' });
                    });
                } else {
                    var _value3 = to.query.src || to.fullPath;
                    var _label3 = to.query.name || to.name;
                    var _meta3 = to.meta || _router2.default.$avueRouter.meta || {};
                    var _i18n3 = to.query.i18n;
                    if (_meta3.isTab !== false && !(0, _validate.validatenull)(_value3) && !(0, _validate.validatenull)(_label3)) {
                        _store2.default.commit('ADD_TAG', {
                            label: _label3,
                            value: _value3,
                            params: to.params,
                            query: to.query,
                            meta: function () {
                                if (!_i18n3) {
                                    return _meta3;
                                }
                                return {
                                    i18n: _i18n3
                                };
                            }(),
                            group: _router2.default.$avueRouter.group || []
                        });
                    }
                    next();
                }
            }
        }
    }
});

_router2.default.afterEach(function () {
    _nprogress2.default.done();
    var title = _store2.default.getters.tag.label;
    var i18n = _store2.default.getters.tag.meta.i18n;
    title = _router2.default.$avueRouter.generateTitle(title, i18n);
    //根据当前的标签也获取label的值动态设置浏览器标题
    _router2.default.$avueRouter.setTitle(title);
});