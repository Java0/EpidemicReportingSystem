'use strict';
/**
 * 全站http配置
 *
 * axios参数说明
 * isSerialize是否开启form表单提交
 * isToken是否需要token
 */

exports.__esModule = true;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _store = require('../store/');

var _store2 = _interopRequireDefault(_store);

var _router = require('./router');

var _router2 = _interopRequireDefault(_router);

var _util = require('../utils/util');

var _store3 = require('../utils/store');

var _elementUi = require('element-ui');

var _website = require('@/config/website');

var _website2 = _interopRequireDefault(_website);

var _nprogress = require('nprogress');

var _nprogress2 = _interopRequireDefault(_nprogress);

require('nprogress/nprogress.css');

var _jsBase = require('js-base64');

var _env = require('@/config/env');

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// progress bar
_axios2.default.defaults.timeout = 10000;
//返回其他状态吗
// progress bar style
_axios2.default.defaults.validateStatus = function (status) {
  return status >= 200 && status <= 500; // 默认的
};
//跨域请求，允许保存cookie
_axios2.default.defaults.withCredentials = true;
// NProgress Configuration
_nprogress2.default.configure({
  showSpinner: false
});
//HTTPrequest拦截
_axios2.default.interceptors.request.use(function (config) {
  _nprogress2.default.start(); // start progress bar
  //const meta = (config.meta || {});
  //const isToken = meta.isToken === false;
  //请求带上hhid
  //config.headers['hhid']=store.getters.userInfo.hhid;  2.0 后台缺少字段不需要hhid
  var token = (0, _store3.getStore)({ name: 'token', type: 'session' });
  var jwt = (0, _store3.getStore)({ name: 'jwt', type: 'session' }); //瑞飞公司验证
  //debugger;
  if (!(0, _util.isEmpty)(jwt)) {
    config.headers['Authorization'] = jwt;
  } else {
    config.headers['Authorization'] = 'Basic ' + _jsBase.Base64.encode(_website2.default.clientId + ':' + _website2.default.clientSecret);
  }

  if (!(0, _util.isEmpty)(token)) {
    //这里的token需要在登陆的时候设置进去
    config.headers['x-auth-token'] = token; // 让每个请求携带token--['Authorization']为自定义key 请根据实际情况自行修改
  } else {
    //优先使用集成地址的hhid 然后去找登陆hhid
    config.headers['hhid'] = _store2.default.getters.integrateHHid || _store2.default.getters.userInfo.hhid || "";
  }
  //headers中配置serialize为true开启序列化
  /**if (config.method === 'post' && meta.isSerialize === true) {
    config.data = serialize(config.data);
  }*/
  /**
   * 如果是文件类型的请求放过不需要序列化
   * 如果有参数 才有必要去序列化参数 必须要序列化才能获取到参数
   */
  if (config.headers['Content-Type']) {
    if(config.url.indexOf('commonFileService') == -1){
      if(config.headers['Content-Type'].indexOf("multipart/form-data") > -1||config.headers['Content-Type'].indexOf("application/x-www-form-urlencoded")>-1){
        if (config.method === 'post' && !(0, _util.isEmpty)(config.data)) {
          config.data = (0, _util.serialize)(config.data);
        }
      }
    }
  }
  //如果传参是数组处理
  if (config.method === 'get') {
    config.paramsSerializer = function (params) {
      return _qs2.default.stringify(params, { arrayFormat: 'repeat' });
    };
  }
  return config;
}, function (error) {
  return Promise.reject(error);
});
//HTTPresponse拦截
_axios2.default.interceptors.response.use(function (res) {
  _nprogress2.default.done();
  var status = res.data.code || 200;
  var statusWhiteList = _website2.default.statusWhiteList || [];
  var message = res.data.msg || '未返回msg或未知错误';
  //如果在白名单里则自行catch逻辑处理
  if (statusWhiteList.includes(status)) return Promise.reject(res);
  //如果是401则跳转到登录页面
  /*if (status === 401) _store2.default.dispatch('FedLogOut').then(function () {
    return _router2.default.push({ path: '/login' });
  });*/
  if(status != 1){
    if(message.indexOf('hhid为空')>-1 ||message.indexOf('您的会话ID已经失效')>-1 || 
      message.indexOf('您没有使用此系统的权限')>-1 || message.indexOf('您的IP地址不允许使用本系统')>-1){
        (0, _elementUi.Message)({
          message: message,
          type: 'error'
        });
        return Promise.reject(new Error(message));
      }
  }
  // 如果请求为非200否者默认统一处理
  /*if (status !== 200) {
    (0, _elementUi.Message)({
      message: message,
      type: 'error'
    });
    return Promise.reject(new Error(message));
  }*/
  return res;
}, function (error) {
  _nprogress2.default.done();
  return Promise.reject(new Error(error));
});

function checkStatus(response) {
  _nprogress2.default.done();
  if (response.status === 200 || response.status === 304) {
    return response;
  }
  return {
    data: {
      code: -404,
      message: response.statusText,
      data: response.statusText
    }
  };
}
//避免重写 不要写和post一样的名字
_axios2.default.apiPost = function (params) {
  return (0, _axios2.default)({
    method: 'post',
    url: _env.baseUrl + params.url,
    data: params.data,
    timeout: 30000,
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    }
  }).then(checkStatus).then(params.call);
};
//避免重写 不要写和get一样的名字
_axios2.default.apiGet = function (params) {
  return (0, _axios2.default)({
    method: 'get',
    url: _env.baseUrl + params.url,
    params: params.data,
    timeout: 30000,
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    }
  }).then(checkStatus).then(params.call);
};

_axios2.default.fileGet = function (params) {
  return (0, _axios2.default)({
    method: 'get',
    url: _env.baseUrl + params.url,
    params: params.data,
    responseType: 'blob', //blob
    timeout: 30000
  }).then(checkStatus).then(params.call);
};
//避免重写 不要写和post一样的名字
_axios2.default.httpPost = function (params) {
  return (0, _axios2.default)({
    method: 'post',
    url: params.url,
    data: params.data,
    timeout: 30000,
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    }
  }).then(checkStatus).then(params.call);
};
//避免重写 不要写和get一样的名字
_axios2.default.httpGet = function (params) {
  return (0, _axios2.default)({
    method: 'get',
    url: params.url,
    params: params.data,
    timeout: 30000,
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    }
  }).then(checkStatus).then(params.call);
};

//避免重写 不要写和post一样的名字
_axios2.default.filePost = function (params) {
  return _axios2.default.post(_env.baseUrl + params.url, params.data, {
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type': 'multipart/form-data'
    }
  }).then(checkStatus).then(params.call);
};

exports.default = _axios2.default;