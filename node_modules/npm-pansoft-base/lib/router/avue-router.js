'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var RouterPlugin = function RouterPlugin() {
    this.$router = null;
    this.$store = null;
};
RouterPlugin.install = function (vue, router, store, i18n) {
    var _this = this;

    this.$router = router;
    this.$store = store;
    this.$vue = new vue({ i18n: i18n });
    function isURL(s) {
        return (/^http[s]?:\/\/.*/.test(s)
        );
    }
    function objToform(obj) {
        var result = [];
        Object.keys(obj).forEach(function (ele) {
            result.push(ele + '=' + obj[ele]);
        });
        return result.join('&');
    }
    this.$router.$avueRouter = {
        //全局配置
        $website: this.$store.getters.website,
        routerList: [],
        group: '',
        meta: {},
        safe: this,
        // 设置标题
        setTitle: function setTitle(title) {
            var defaultTitle = _this.$vue.$t('title');
            title = title ? title + '-' + defaultTitle : defaultTitle;
            document.title = title;
        },
        closeTag: function closeTag(value) {
            var tag = value || _this.$store.getters.tag;
            if (typeof value === 'string') {
                tag = _this.$store.getters.tagList.filter(function (ele) {
                    return ele.value === value;
                })[0];
            }
            _this.$store.commit('DEL_TAG', tag);
        },
        generateTitle: function generateTitle(title, key) {
            if (!key) return title;
            var hasKey = _this.$vue.$te('route.' + key);
            if (hasKey) {
                // $t :this method from vue-i18n, inject in @/lang/index.js
                var translatedTitle = _this.$vue.$t('route.' + key);

                return translatedTitle;
            }
            return title;
        },
        //处理路由
        getPath: function getPath(params) {
            var src = params.src;

            var result = src || '/';
            if (src.includes("http") || src.includes("https")) {
                result = '/myiframe/urlPath?' + objToform(params);
            }
            return result;
        },
        //正则处理路由
        vaildPath: function vaildPath(list, path) {
            var result = false;
            list.forEach(function (ele) {
                if (new RegExp("^" + ele + ".*", "g").test(path)) {
                    result = true;
                }
            });
            return result;
        },
        //设置路由值
        getValue: function getValue(route) {
            var value = "";
            if (route.query.src) {
                value = route.query.src;
            } else {
                value = route.path;
            }
            return value;
        },
        //动态路由
        formatRoutes: function formatRoutes() {
            var _this2 = this;
            var aMenu = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var first = arguments[1];

            var aRouter = [];
            var propsConfig = this.$website.menu.props;
            var propsDefault = {
                label: propsConfig.label || 'name',
                path: propsConfig.path || 'path',
                icon: propsConfig.icon || 'icon',
                children: propsConfig.children || 'children',
                meta: propsConfig.meta || 'meta'
            };
            if (aMenu.length === 0) return;

            var _loop = function _loop(i) {
                var oMenu = aMenu[i];
                if (_this2.routerList.includes(oMenu[propsDefault.path])) return {
                        v: void 0
                    };
                var path = function () {
                    if (first) {
                        if (oMenu[propsDefault.path]) {
                            return oMenu[propsDefault.path].replace('/index', '');
                        } else {
                            return oMenu[propsDefault.path];
                        }
                    } else {
                        return oMenu[propsDefault.path];
                    }
                }(),

                //特殊处理组件
                component = 'views' + oMenu.path,
                    name = oMenu[propsDefault.label],
                    icon = oMenu[propsDefault.icon],
                    children = oMenu[propsDefault.children],
                    meta = oMenu[propsDefault.meta] || {};

                var isChild = children.length !== 0;
                var oRouter = {
                    path: path,
                    component: function (_component) {
                        function component(_x2) {
                            return _component.apply(this, arguments);
                        }

                        component.toString = function () {
                            return _component.toString();
                        };

                        return component;
                    }(function (resolve) {
                        // 判断是否为首路由
                        if (first) {
                            require(['@/page/index'], resolve);
                            return;
                            // 判断是否为多层路由
                        } else if (isChild && !first) {
                            require(['@/page/index/layout'], resolve);
                            return;
                            // 判断是否为最终的页面视图
                        } else {
                            require(['@/' + component + '.vue'], resolve);
                        }
                    }),

                    name: name,
                    icon: icon,
                    meta: meta,
                    redirect: function () {
                        if (!isChild && first && !isURL(path)) return path + '/index';else return '';
                    }(),
                    // 处理是否为一级路由
                    children: !isChild ? function () {
                        if (first) {
                            if (!isURL(path)) oMenu[propsDefault.path] = path + '/index';
                            return [{
                                component: function (_component2) {
                                    function component(_x3) {
                                        return _component2.apply(this, arguments);
                                    }

                                    component.toString = function () {
                                        return _component2.toString();
                                    };

                                    return component;
                                }(function (resolve) {
                                    require(['../' + component + '.vue'], resolve);
                                }),

                                icon: icon,
                                name: name,
                                meta: meta,
                                path: 'index'
                            }];
                        }
                        return [];
                    }() : function () {
                        return _this2.formatRoutes(children, false);
                    }()
                };
                aRouter.push(oRouter);
            };

            for (var i = 0; i < aMenu.length; i++) {
                var _ret = _loop(i);

                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
            }
            if (first) {
                if (!this.routerList.includes(aRouter[0][propsDefault.path])) {
                    this.safe.$router.addRoutes(aRouter);
                    this.routerList.push(aRouter[0][propsDefault.path]);
                }
            } else {
                return aRouter;
            }
        }
    };
};
exports.default = RouterPlugin;